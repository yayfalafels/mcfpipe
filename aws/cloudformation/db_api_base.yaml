AWSTemplateFormatVersion: '2010-09-09'
Description: Database API Stack - Thin Wrapper with DynamoDB, Lambda, API Gateway

Parameters:
  VpcId:
    Type: String
  PrivateSubnetIds:
    Type: List<String>
  S3Bucket:
    Type: String
  LambdaSourceCodeS3:
    Type: String
  DBSchemaS3:
    Type: String
  DBLambdaSG:
    Type: String

Resources:

  # Lambda Function
  DBLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:BatchWriteItem
                Resource: "*"

  DBLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: db-api-handler
      Runtime: python3.11
      Handler: db.lambda_handler
      Role: !GetAtt DBLambdaRole.Arn
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref LambdaSourceCodeS3
      VpcConfig:
        SubnetIds: !Ref PrivateSubnetIds
        SecurityGroupIds:
          - !Ref DBLambdaSG
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          DB_SCHEMA_S3_PATH: !Ref DBSchemaS3

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DBLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DatabaseAPI}/*/*"

  # API Gateway
  DatabaseAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DatabaseAPI
      Description: Generic Database API for DynamoDB tables

  RootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DatabaseAPI
      ParentId: !GetAtt DatabaseAPI.RootResourceId
      PathPart: "{table}"

  ItemResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DatabaseAPI
      ParentId: !Ref RootResource
      PathPart: "{id}"

  MethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DatabaseAPI
      ResourceId: !Ref RootResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DBLambdaFunction.Arn}/invocations"

  MethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DatabaseAPI
      ResourceId: !Ref ItemResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DBLambdaFunction.Arn}/invocations"

  MethodPUT:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DatabaseAPI
      ResourceId: !Ref ItemResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DBLambdaFunction.Arn}/invocations"

  MethodDELETE:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DatabaseAPI
      ResourceId: !Ref ItemResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DBLambdaFunction.Arn}/invocations"

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MethodPOST
      - MethodGET
      - MethodPUT
      - MethodDELETE
    Properties:
      RestApiId: !Ref DatabaseAPI
      StageName: prod

Outputs:
  DbAPIUrl:
    Description: Base URL for the Database API Gateway
    Value: !Sub "https://${DatabaseAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}-DbAPIUrl"
